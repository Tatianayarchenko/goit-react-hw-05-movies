{"version":3,"file":"static/js/145.05cd995d.chunk.js","mappings":"mTAGMA,E,MAAWC,GAAAA,OAAa,CAC5BC,QCJsB,+BDKtBC,OAAQ,CACNC,QCLmB,mCDMnBC,SAAU,QACVC,eAAe,KAINC,EAAiB,mCAAG,oGACRP,EAASQ,IAAI,uBADL,cACzBC,EADyB,yBAExBA,EAASC,KAAKC,SAFU,2CAAH,qDAKjBC,EAAY,mCAAG,WAAMC,GAAN,uFACHb,EAASQ,IAAI,gBAAiB,CACnDL,OAAQ,CACNW,MAAOD,KAHe,cACpBJ,EADoB,yBAMnBA,EAASC,KAAKC,SANK,2CAAH,sDASZI,EAAY,mCAAG,WAAMC,GAAN,uFACHhB,EAASQ,IAAT,iBAAuBQ,IADpB,cACpBP,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKZO,EAAO,mCAAG,WAAMD,GAAN,uFACEhB,EAASQ,IAAT,iBAAuBQ,EAAvB,aADF,cACfP,EADe,yBAEdA,EAASC,KAAKQ,MAFA,2CAAH,sDAKPC,EAAU,mCAAG,WAAMH,GAAN,uFACDhB,EAASQ,IAAT,iBAAuBQ,EAAvB,aADC,cAClBP,EADkB,yBAEjBA,EAASC,KAAKC,SAFG,2CAAH,uD,yFEjCVS,GAAWC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,+JAURE,EAAWF,EAAAA,GAAAA,GAAH,uC,SCVRG,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACxB,SAACH,EAAD,UACGE,EAAME,KAAI,SAAAC,GAAI,OACb,SAACR,EAAD,CAEES,GAAE,kBAAaD,EAAKE,IACpBC,MAAO,CAAEC,KAAMN,GAHjB,SAKGE,EAAKK,OAJDL,EAAKE,W,oMCFLI,EAAa,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SASlC,OACE,+BACE,SAAC,KAAD,CACEC,cAAe,CAAExB,YAAW,OAAEsB,QAAF,IAAEA,EAAAA,EAAS,IACvCC,SAZe,SAAC,EAAD,GAAqC,IAAlCvB,EAAiC,EAAjCA,YAAiByB,EAAgB,EAAhBA,UACvC,GAA2B,KAAvBzB,EAAY0B,OACd,OAAOC,EAAAA,GAAAA,MAAY,4BAErBJ,EAASvB,GACTyB,KAKE,UAIE,UAAC,KAAD,YACE,SAAC,KAAD,CACEG,KAAK,OACLC,aAAa,MACbC,KAAK,cACLC,WAAS,EACTC,YAAY,kBAEd,mBAAQJ,KAAK,SAAb,4B,UCsBV,EAxCe,WAAO,IAAD,EACnB,GAAwCK,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACMrC,EAAK,UAAGiC,EAAavC,IAAI,gBAApB,QAAgC,GACrCkB,GAAW0B,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,IAAK,IAIYC,EAJb,mCAIF,qGACqB1C,EAAAA,EAAAA,IAAaE,GADlC,UACQJ,EADR,OAEEyC,EAAezC,GACK,IAAhBA,EAAK6C,OAHX,yCAIWf,EAAAA,GAAAA,MACL,6EALN,2CAJE,qDACF,GAAc,KAAV1B,EACF,OAWFwC,IACA,MAAOE,GACPhB,EAAAA,GAAAA,MAAY,8CAEb,CAAC1B,IAMJ,OACE,iCACE,SAACoB,EAAD,CAAYC,MAAOrB,EAAOsB,SANT,SAAAtB,GACnBkC,EAA0B,KAAVlC,EAAe,CAAEA,MAAOA,GAAU,QAMhD,SAAC,EAAA2C,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,SACGR,IAAe,SAAC1B,EAAA,EAAD,CAAYC,MAAOyB,EAAaxB,SAAUA","sources":["api/fetchApi.js","constants/api.js","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\nimport { API_KEY, BASE_URL } from 'constants/api';\n\nconst instance = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n    include_adult: false,\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const response = await instance.get('/trending/movie/day');\n  return response.data.results;\n};\n\nexport const searchMovies = async searchQuery => {\n  const response = await instance.get('/search/movie', {\n    params: {\n      query: searchQuery,\n    },\n  });\n  return response.data.results;\n};\n\nexport const getMovieById = async movieId => {\n  const response = await instance.get(`/movie/${movieId}`);\n  return response.data;\n};\n\nexport const getCast = async movieId => {\n  const response = await instance.get(`/movie/${movieId}/credits`);\n  return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const response = await instance.get(`/movie/${movieId}/reviews`);\n  return response.data.results;\n};\n","export const BASE_URL = 'https://api.themoviedb.org/3';\nexport const API_KEY = '1d1120e9d6d730509fa5db5176245d73';\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const FilmLink = styled(NavLink)`\n  display: block;\n  color: #000000;\n  text-decoration: none;\n  :hover {\n    color: #bf2155;\n    text-decoration: underline;\n  }\n`;\n\nexport const FilmList = styled.ul`\n  padding: 0;\n`;\n","import { FilmLink, FilmList } from './MoviesList.styled';\nimport PropTypes from 'prop-types';\n\nexport const MoviesList = ({ films, location }) => (\n  <FilmList>\n    {films.map(film => (\n      <FilmLink\n        key={film.id}\n        to={`/movies/${film.id}`}\n        state={{ from: location }}\n      >\n        {film.title}\n      </FilmLink>\n    ))}\n  </FilmList>\n);\n\nMoviesList.propTypes = {\n  films: PropTypes.array.isRequired,\n  location: PropTypes.object.isRequired,\n};\n","import { Formik, Field, Form } from 'formik';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport PropTypes from 'prop-types';\n\nexport const SearchForm = ({ value, onSubmit }) => {\n  const handleSubmit = ({ searchQuery }, { resetForm }) => {\n    if (searchQuery.trim() === '') {\n      return toast.error('Please, enter a request.');\n    }\n    onSubmit(searchQuery);\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={{ searchQuery: value ?? '' }}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <Field\n            type=\"text\"\n            autoComplete=\"off\"\n            name=\"searchQuery\"\n            autoFocus\n            placeholder=\"Search movie\"\n          />\n          <button type=\"submit\">Search</button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { Loading } from 'components/Loader/Loader';\nimport { Suspense } from 'react';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport { searchMovies } from 'api/fetchApi';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchFilms, setSearchFilms] = useState([]);\n  const query = searchParams.get('query') ?? '';\n  const location = useLocation();\n\n  useEffect(() => {\n    try {\n      if (query === '') {\n        return;\n      }\n      async function fetchSearcFilms() {\n        const data = await searchMovies(query);\n        setSearchFilms(data);\n        if (data.length === 0) {\n          return toast.error(\n            'Sorry, there are no movies matching your search query. Please try again.'\n          );\n        }\n      }\n      fetchSearcFilms();\n    } catch (error) {\n      toast.error('Something went wrong. Please try again.');\n    }\n  }, [query]);\n\n  const handleSubmit = query => {\n    setSearchParams(query !== '' ? { query: query } : {});\n  };\n\n  return (\n    <>\n      <SearchForm value={query} onSubmit={handleSubmit} />\n      <Suspense fallback={<Loading />}>\n        {searchFilms && <MoviesList films={searchFilms} location={location} />}\n      </Suspense>\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["instance","axios","baseURL","params","api_key","language","include_adult","getTrendingMovies","get","response","data","results","searchMovies","searchQuery","query","getMovieById","movieId","getCast","cast","getReviews","FilmLink","styled","NavLink","FilmList","MoviesList","films","location","map","film","to","id","state","from","title","SearchForm","value","onSubmit","initialValues","resetForm","trim","toast","type","autoComplete","name","autoFocus","placeholder","useSearchParams","searchParams","setSearchParams","useState","searchFilms","setSearchFilms","useLocation","useEffect","fetchSearcFilms","length","error","Suspense","fallback"],"sourceRoot":""}