{"version":3,"file":"static/js/953.ec9fe0c4.chunk.js","mappings":"4TAEAA,IAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,oGACRF,IAAAA,IAAU,sBAAuB,CACtDG,OAAQ,CACNC,QAASH,KAHkB,cACzBI,EADyB,yBAMxBA,EAASC,KAAKC,SANU,2CAAH,qDASjBC,EAAY,mCAAG,WAAMC,GAAN,uFACHT,IAAAA,IAAU,gBAAiB,CAChDG,OAAQ,CACNC,QAASH,EACTS,MAAOD,EACPE,SAAU,QACVC,eAAe,KANO,cACpBP,EADoB,yBASnBA,EAASC,KAAKC,SATK,2CAAH,sDAYZM,EAAY,mCAAG,WAAMC,GAAN,uFACHd,IAAAA,IAAA,iBAAoBc,GAAW,CACpDX,OAAQ,CACNC,QAASH,EACTU,SAAU,QACVC,eAAe,KALO,cACpBP,EADoB,yBAQnBA,EAASC,MARU,2CAAH,sDAYZS,EAAO,mCAAG,WAAMD,GAAN,uFACEd,IAAAA,IAAA,iBAAoBc,EAApB,YAAuC,CAC5DX,OAAQ,CACNC,QAASH,EACTU,SAAU,WAJO,cACfN,EADe,yBAQdA,EAASC,KAAKU,MARA,2CAAH,sDAWPC,EAAU,mCAAG,WAAMH,GAAN,uFACDd,IAAAA,IAAA,iBAAoBc,EAApB,YAAuC,CAC5DX,OAAQ,CACNC,QAASH,EACTU,SAAU,WAJU,cAClBN,EADkB,yBAQjBA,EAASC,KAAKC,SARG,2CAAH,uD,wNChDVW,EAAY,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAClBC,EAAuDD,EAAvDC,MAAOC,EAAgDF,EAAhDE,aAAcC,EAAkCH,EAAlCG,SAAUC,EAAwBJ,EAAxBI,OAAQC,EAAgBL,EAAhBK,YAEzCC,EAAeD,EAAW,yCACMA,GAClCE,EAEJ,OACE,4BACE,wBAAKN,KACL,gBAAKO,IAAKF,EAAcG,IAAI,QAAQC,MAAM,SAC1C,0BACE,sCADF,IACqBC,KAAKC,MAAqB,GAAfV,GADhC,QAGA,0BACE,oCADF,IACmBC,MAGnB,qCACA,wBACGC,EAAOS,KAAI,SAAAC,GAAK,OACf,wBAAoBA,EAAMC,MAAjBD,EAAME,aCbnBC,GAAqBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,2CA4CxB,EAxCoB,WAAO,IAAD,IAChBvB,GAAYyB,EAAAA,EAAAA,MAAZzB,QACR,GAA0B0B,EAAAA,EAAAA,UAAS,MAAnC,eAAOrB,EAAP,KAAcsB,EAAd,KAEMC,EAAQ,qBADGC,EAAAA,EAAAA,MACSC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAczC,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAK,IACYC,EADb,mCACF,qGACqBlC,EAAAA,EAAAA,IAAaC,GADlC,OACQR,EADR,OAEEmC,EAASnC,GAFX,2CADE,qDAKFyC,IACA,MAAOC,GACPC,EAAAA,GAAAA,MAAY,8CAEb,CAACnC,IAECK,GAKH,4BACE,SAAC,KAAD,CAAM+B,GAAIR,EAAV,sBACA,SAACxB,EAAD,CAAWC,MAAOA,KAElB,oDACA,2BACE,SAACiB,EAAD,CAAoBc,GAAG,OAAvB,mBACA,SAACd,EAAD,CAAoBc,GAAG,UAAvB,yBAGF,SAAC,EAAAC,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,UACE,SAAC,KAAD,SAfG,O","sources":["api/api.js","components/MovieCard/MovieCard.jsx","pages/MovieDetals/MovieDetals.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst API_KEY = '1d1120e9d6d730509fa5db5176245d73';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get('/trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nexport const searchMovies = async searchQuery => {\n  const response = await axios.get('/search/movie', {\n    params: {\n      api_key: API_KEY,\n      query: searchQuery,\n      language: 'en-US',\n      include_adult: false,\n    },\n  });\n  return response.data.results;\n};\n\nexport const getMovieById = async movieId => {\n  const response = await axios.get(`/movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      include_adult: false,\n    },\n  });\n  return response.data;\n  // .find(movie => movie.id === movieId)\n};\n\nexport const getCast = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  // console.log(response);\n  return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  // console.log(response);\n  return response.data.results;\n};\n\n// const requestPopularFilms =\n//   'https://api.themoviedb.org/3/movie/popular?api_key=1d1120e9d6d730509fa5db5176245d73&language=en-US&page=1';\n\n// /trending/movie/day\n\n// const SearchMoviesURL =\n//   'https://api.themoviedb.org/3/search/movie?api_key=1d1120e9d6d730509fa5db5176245d73&language=en-US&page=1&include_adult=false';\n","import defaultImage from 'components/defaultImage/default-profile.jpg';\n\nexport const MovieCard = ({ movie }) => {\n  const { title, vote_average, overview, genres, poster_path } = movie;\n\n  const imageUrlPath = poster_path\n    ? `https://image.tmdb.org/t/p/w500${poster_path}`\n    : defaultImage;\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      <img src={imageUrlPath} alt=\"title\" width=\"240\" />\n      <p>\n        <b>User Score</b> {Math.round(vote_average * 10)}%\n      </p>\n      <p>\n        <b>Overview</b> {overview}\n      </p>\n\n      <b> Genres </b>\n      <ul>\n        {genres.map(genre => (\n          <li key={genre.id}>{genre.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { getMovieById } from 'api/api';\nimport { useState, useEffect, Suspense } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Loading } from 'components/Loader/Loader';\nimport { MovieCard } from 'components/MovieCard/MovieCard';\n\nconst AdditionalInfoLink = styled(NavLink)`\n  display: block;\n`;\n\nconst MovieDetals = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const location = useLocation();\n  const backLink = location.state?.from ?? '/';\n\n  useEffect(() => {\n    try {\n      async function getMovieDetals() {\n        const data = await getMovieById(movieId);\n        setMovie(data);\n      }\n      getMovieDetals();\n    } catch (error) {\n      toast.error('Something went wrong. Please try again.');\n    }\n  }, [movieId]);\n\n  if (!movie) {\n    return null;\n  }\n\n  return (\n    <div>\n      <Link to={backLink}>Go back</Link>\n      <MovieCard movie={movie} />\n\n      <h2>Additional information</h2>\n      <ul>\n        <AdditionalInfoLink to=\"cast\">Cast</AdditionalInfoLink>\n        <AdditionalInfoLink to=\"reviews\">Reviews</AdditionalInfoLink>\n      </ul>\n\n      <Suspense fallback={<Loading />}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetals;\n"],"names":["axios","API_KEY","getTrendingMovies","params","api_key","response","data","results","searchMovies","searchQuery","query","language","include_adult","getMovieById","movieId","getCast","cast","getReviews","MovieCard","movie","title","vote_average","overview","genres","poster_path","imageUrlPath","defaultImage","src","alt","width","Math","round","map","genre","name","id","AdditionalInfoLink","styled","NavLink","useParams","useState","setMovie","backLink","useLocation","state","from","useEffect","getMovieDetals","error","toast","to","Suspense","fallback"],"sourceRoot":""}