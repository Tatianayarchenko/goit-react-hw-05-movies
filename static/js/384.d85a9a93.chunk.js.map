{"version":3,"file":"static/js/384.d85a9a93.chunk.js","mappings":"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","sources":["api/api.js","components/MoviesSearch/SearchFilmList/SearchFilmList.jsx","components/MoviesSearch/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst API_KEY = '1d1120e9d6d730509fa5db5176245d73';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get('/trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nexport const searchMovies = async searchQuery => {\n  const response = await axios.get('/search/movie', {\n    params: {\n      api_key: API_KEY,\n      query: searchQuery,\n      language: 'en-US',\n      include_adult: false,\n    },\n  });\n  return response.data.results;\n};\n\nexport const getMovieById = async movieId => {\n  const response = await axios.get(`/movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      include_adult: false,\n    },\n  });\n  return response.data;\n  // .find(movie => movie.id === movieId)\n};\n\nexport const getCast = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  // console.log(response);\n  return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  // console.log(response);\n  return response.data.results;\n};\n\n// const requestPopularFilms =\n//   'https://api.themoviedb.org/3/movie/popular?api_key=1d1120e9d6d730509fa5db5176245d73&language=en-US&page=1';\n\n// /trending/movie/day\n\n// const SearchMoviesURL =\n//   'https://api.themoviedb.org/3/search/movie?api_key=1d1120e9d6d730509fa5db5176245d73&language=en-US&page=1&include_adult=false';\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst FilmLink = styled(NavLink)`\n  display: block;\n`;\n\nexport const SearchFilmsList = ({ films, url, location }) => (\n  <ul>\n    {films.map(film => (\n      <FilmLink\n        key={film.id}\n        to={`${url}${film.id}`}\n        state={{ from: location }}\n      >\n        {film.title}\n      </FilmLink>\n    ))}\n  </ul>\n);\n","import { Formik, Field, Form } from 'formik';\n\n// import PropTypes from 'prop-types';\n// import { Formik } from 'formik';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n// import {\n//   SearchFormButton,\n//   HeaderSearchbar,\n//   SearchForm,\n//   Input,\n//   SearchSvg,\n// } from './Searchbar.styled';\n\nconst initialValues = {\n  searchQuery: '',\n};\n\nexport const SearchForm = ({ onSubmit }) => {\n  const handleSubmit = ({ searchQuery }, { resetForm }) => {\n    if (searchQuery.trim() === '') {\n      return toast.error('Please, enter a request.');\n    }\n    onSubmit(searchQuery);\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n        <Form>\n          <Field\n            type=\"text\"\n            autoComplete=\"off\"\n            name=\"searchQuery\"\n            autoFocus\n            placeholder=\"Search movie\"\n          />\n          <button type=\"submit\">Search</button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n","import { Loading } from 'components/Loader/Loader';\nimport { Suspense } from 'react';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport { searchMovies } from 'api/api';\nimport { SearchFilmsList } from 'components/MoviesSearch/SearchFilmList/SearchFilmList';\nimport { SearchForm } from 'components/MoviesSearch/SearchForm/SearchForm';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchFilms, setSearchFilms] = useState([]);\n  const query = searchParams.get('query') ?? '';\n  const location = useLocation();\n\n  useEffect(() => {\n    try {\n      if (query === '') {\n        return;\n      }\n      async function fetchSearcFilms() {\n        const data = await searchMovies(query);\n        setSearchFilms(data);\n        if (data.length === 0) {\n          return toast.error(\n            'Sorry, there are no movies matching your search query. Please try again.'\n          );\n        }\n      }\n      fetchSearcFilms();\n    } catch (error) {\n      toast.error('Something went wrong. Please try again.');\n    }\n  }, [query]);\n\n  const handleSubmit = query => {\n    setSearchParams(query !== '' ? { query: query } : {});\n  };\n\n  return (\n    <>\n      <SearchForm onSubmit={handleSubmit} />\n      <Suspense fallback={<Loading />}>\n        {searchFilms && (\n          <SearchFilmsList films={searchFilms} url=\"\" location={location} />\n        )}\n      </Suspense>\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["axios","API_KEY","getTrendingMovies","params","api_key","response","data","results","searchMovies","searchQuery","query","language","include_adult","getMovieById","movieId","getCast","cast","getReviews","FilmLink","styled","NavLink","SearchFilmsList","films","url","location","map","film","to","id","state","from","title","initialValues","SearchForm","onSubmit","resetForm","trim","toast","type","autoComplete","name","autoFocus","placeholder","useSearchParams","searchParams","setSearchParams","useState","searchFilms","setSearchFilms","get","useLocation","useEffect","fetchSearcFilms","length","error","Suspense","fallback"],"sourceRoot":""}